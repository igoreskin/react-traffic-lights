{"version":3,"sources":["MainContainer.module.css","Light.module.css","Light.js","MainContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","frame","red","yellow","green","orange","circle","Light","props","react_default","a","createElement","className","styles","color","join","onClick","click","MainContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","redClick","console","log","setState","objectSpread","state","showRed","showYellow","showGreen","yellowClick","greenClick","reset","classes","react","src_Light","type","Component","App","src_MainContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EACAA,EAAAC,QAAA,CAAkBC,MAAA,6BAAAC,IAAA,2BAAAC,OAAA,8BAAAC,MAAA,6BAAAC,OAAA,sDCAlBN,EAAAC,QAAA,CAAkBM,OAAA,qPCSHC,EAPD,SAACC,GACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,CAACC,IAAOP,OAAQE,EAAMM,OAAOC,KAAK,KAAMC,QAASR,EAAMS,yBCoE5DC,cApEb,SAAAA,EAAYV,GAAO,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMd,KASRkB,SAAW,WACTC,QAAQC,IAAI,eACZT,EAAKU,SAALT,OAAAU,EAAA,EAAAV,CAAA,GAAkBD,EAAKY,MAAvB,CACEC,SAAS,EACTC,YAAY,EACZC,WAAW,MAfIf,EAkBnBgB,YAAc,WACZR,QAAQC,IAAI,kBACZT,EAAKU,SAALT,OAAAU,EAAA,EAAAV,CAAA,GAAkBD,EAAKY,MAAvB,CACEC,SAAS,EACTC,YAAY,EACZC,WAAW,MAvBIf,EA0BnBiB,WAAa,WACXT,QAAQC,IAAI,iBACZT,EAAKU,SAALT,OAAAU,EAAA,EAAAV,CAAA,GAAkBD,EAAKY,MAAvB,CACEC,SAAS,EACTC,YAAY,EACZC,WAAW,MA/BIf,EAmCnBkB,MAAQ,WACNlB,EAAKU,SAALT,OAAAU,EAAA,EAAAV,CAAA,GACKD,EAAKY,MADV,CAEEC,SAAS,EACTC,YAAY,EACZC,WAAW,MArCbf,EAAKY,MAAQ,CACXC,SAAS,EACTC,YAAY,EACZC,WAAW,GANIf,wEA6CjB,IAAImB,EAAU,GAUd,OARGhB,KAAKS,MAAMC,QACZM,EAAUzB,IAAOX,IACRoB,KAAKS,MAAME,WACpBK,EAAUzB,IAAOV,OACRmB,KAAKS,MAAMG,YACpBI,EAAUzB,IAAOT,OAIjBK,EAAAC,EAAAC,cAAC4B,EAAA,SAAD,KACE9B,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOZ,OACpBqB,KAAKS,MAAMC,QAAUvB,EAAAC,EAAAC,cAAC6B,EAAD,CAAOvB,MAAOK,KAAKI,SAAUZ,MAAOwB,IAAc7B,EAAAC,EAAAC,cAAC6B,EAAD,CAAOvB,MAAOK,KAAKI,WAC1FJ,KAAKS,MAAME,WAAaxB,EAAAC,EAAAC,cAAC6B,EAAD,CAAOvB,MAAOK,KAAKa,YAAarB,MAAOwB,IAAc7B,EAAAC,EAAAC,cAAC6B,EAAD,CAAOvB,MAAOK,KAAKa,cAChGb,KAAKS,MAAMG,UAAYzB,EAAAC,EAAAC,cAAC6B,EAAD,CAAOvB,MAAOK,KAAKc,WAAYtB,MAAOwB,IAAc7B,EAAAC,EAAAC,cAAC6B,EAAD,CAAOvB,MAAOK,KAAKc,cAEjG3B,EAAAC,EAAAC,cAAA,UAAQ8B,KAAK,SAASzB,QAASM,KAAKe,OAApC,iBA/DoBK,aCSbC,EARH,WACV,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e34e1de9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"frame\":\"MainContainer_frame__x1Kya\",\"red\":\"MainContainer_red__2MMrX\",\"yellow\":\"MainContainer_yellow__lRUiX\",\"green\":\"MainContainer_green__1H9rp\",\"orange\":\"MainContainer_orange__iOwf2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"circle\":\"Light_circle__Ih8Jr\"};","import React from 'react';\r\nimport styles from './Light.module.css';\r\n\r\nconst Light = (props) => {\r\n  return (\r\n    <div className={[styles.circle, props.color].join(' ')} onClick={props.click}>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Light;\r\n","import React, { Component, Fragment } from 'react';\r\nimport Light from './Light';\r\nimport styles from './MainContainer.module.css';\r\n\r\nclass MainContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      showRed: false,\r\n      showYellow: false,\r\n      showGreen: false\r\n    }\r\n  }\r\n\r\n  redClick = () => {\r\n    console.log(\"Red clicked\");\r\n    this.setState({...this.state,\r\n      showRed: true,\r\n      showYellow: false,\r\n      showGreen: false\r\n    })\r\n  }\r\n  yellowClick = () => {\r\n    console.log(\"Yellow clicked\");\r\n    this.setState({...this.state,\r\n      showRed: false,\r\n      showYellow: true,\r\n      showGreen: false\r\n    })\r\n  }\r\n  greenClick = () => {\r\n    console.log(\"Green clicked\");\r\n    this.setState({...this.state,\r\n      showRed: false,\r\n      showYellow: false,\r\n      showGreen: true\r\n    })\r\n  }\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      ...this.state,\r\n      showRed: false,\r\n      showYellow: false,\r\n      showGreen: false\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let classes = [];\r\n\r\n    if(this.state.showRed) {\r\n      classes = styles.red\r\n    } else if (this.state.showYellow) {\r\n      classes = styles.yellow\r\n    } else if (this.state.showGreen) {\r\n      classes = styles.green\r\n    }\r\n\r\n    return(\r\n      <Fragment>\r\n        <div className={styles.frame}>\r\n          {this.state.showRed ? <Light click={this.redClick} color={classes} /> : <Light click={this.redClick} />}\r\n          {this.state.showYellow ? <Light click={this.yellowClick} color={classes} /> : <Light click={this.yellowClick} />}\r\n          {this.state.showGreen ? <Light click={this.greenClick} color={classes} /> : <Light click={this.greenClick} />}\r\n        </div>\r\n        <button type=\"button\" onClick={this.reset}>Reset</button>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MainContainer;","import React from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport MainContainer from './MainContainer';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <MainContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}